diff --git a/lib/ruote-amqp/receiver.rb b/lib/ruote-amqp/receiver.rb
index 2d96a98..f88147d 100644
--- a/lib/ruote-amqp/receiver.rb
+++ b/lib/ruote-amqp/receiver.rb
@@ -9,8 +9,17 @@ module RuoteAMQP
   #
   # Used in conjunction with the RuoteAMQP::Participant, the WorkitemListener
   # subscribes to a specific direct exchange and monitors for
-  # incoming workitems. It expects workitems to arrive serialized as
-  # JSON.
+  # incoming messages.
+  #
+  # It expects workitems to arrive serialized as JSON.
+  #
+  # If an error has occured then the incoming workitem should have a
+  # top level 'error' key set with descriptive information about the
+  # error. The process will then go into an error state.
+  #
+  # If the incoming JSON has a top level 'definition' key then this
+  # item is taken to be a process definition to launch.
+  #
   #
   # == Configuration
   #
@@ -42,6 +51,24 @@ module RuoteAMQP
   #
   class Receiver < Ruote::Receiver
 
+    # error handling based on https://github.com/jmettraux/ruote-beanstalk/blob/master/lib/ruote/beanstalk/receiver.rb#L36
+
+    class ReceiveError < RuntimeError
+
+      attr_reader :fei
+
+      def initialize(fei,errmsg)
+        @fei = fei
+        @msg = errmsg
+        super(errmsg)
+      end
+
+      def inspect()
+          return @msg
+      end
+    end
+
+
     attr_reader :queue
 
     # Starts a new Receiver
@@ -111,6 +138,16 @@ module RuoteAMQP
 
       return unless item.is_a?(Hash)
 
+      if item.has_key?('error')
+        # a workitem that resulted in an error
+        exc = ReceiveError.new(item['fei'], item['error'])
+        if item.has_key?('trace')
+            exc.set_backtrace(item['trace'])
+        end
+        @context.error_handler.action_handle('dispatch', item['fei'], exc)
+        return
+      end
+      
       not_li = ! item.has_key?('definition')
 
       return if @launchitems == :only && not_li
